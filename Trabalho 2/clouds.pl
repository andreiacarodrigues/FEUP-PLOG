:-include('generator.pl').:- use_module(library(system)).clouds(L):-	%LineClues = [6,6,3,2,none,4,none,2],	%ColClues = [6,6,3,none,5,2,6,none],	LineClues = [6,6,3,2,none,4,none,2,5,none,	none,none,none,none,none,none,none,none,none,none	],	ColClues = [6,6,3,none,5,2,6,none,0,none,	2,none,2,none,none,none,none,none,none,none	],	solveClouds(LineClues,ColClues,L),	once(printClouds(LineClues,ColClues,L)).	testCloudsPrintMe(NLines,NCols,NClouds,NLineClues,NColClues,Opts):-	write('Generator: '), nl,	generatePuzzlePrintMe(NLines,NCols,NClouds,NLineClues,NColClues,LineClues,ColClues),	write('Solver: ' ), nl,	solveClouds(LineClues,ColClues,Lines,Opts),	print_time,	fd_statistics,	printClouds(LineClues, ColClues, Lines).	testClouds(NLines,NCols,NClouds,NLineClues,NColClues,Opts,TS):-	%write('Generator: '), nl,	%write(NClouds), nl,	generatePuzzle(NLines,NCols,NClouds,NLineClues,NColClues,LineClues,ColClues),	%write('Solver: ' ), nl,	%write(LineClues), nl,	%write(ColClues), nl,	solveClouds(LineClues,ColClues,_,Opts),	get_time(TS).	testOnce(NLines,NCols,Opts,TS):-	MaxNCloudsLines is div(NLines + 1,3) + 1,	MaxNCloudsCols is div(NCols + 1,3) + 1,	MaxNClouds is div(MaxNCloudsLines * MaxNCloudsCols, 4),		MinNLineClues is div(NLines,2),	MaxNLineClues is NLines + 1,	MinNColClues is div(NCols,2),	MaxNColClues is NCols + 1,		once((	repeat,	random(1,MaxNClouds,NClouds),		random(MinNLineClues,MaxNLineClues,NLineClues),	random(MinNColClues,MaxNColClues,NColClues),		testClouds(NLines,NCols,NClouds,NLineClues,NColClues,Opts,TS)	)).	testSuite(I,NLines,NCols,Opts,TS):-	testSuite_(I,NLines,NCols,Opts,TS,0).	testSuite_(0,_,_,_,TS,TS).testSuite_(I,NLines,NCols,Opts,TS,Acc):-	I > 0,	!,	testOnce(NLines,NCols,Opts,TS1),	Acc1 is TS1 + Acc,	I1 is I - 1,	testSuite_(I1,NLines,NCols,Opts,TS,Acc1).			runTest(I,NLines,NCols,Opts):-	write('Test: NLines = '), write(NLines), write(', NCols = '), write(NCols), write(', Opts = '), write(Opts), nl,	testSuite(I,NLines,NCols,Opts,TS),	write('Time = '), write(TS), nl.	generateStatistics:-	runTest(20,5,5,[]),	runTest(20,6,6,[]),	runTest(20,7,7,[]),	runTest(20,8,8,[]),	runTest(20,9,9,[]),	runTest(20,10,10,[]),		runTest(20,5,5,[ff]),	runTest(20,6,6,[ff]),	runTest(20,7,7,[ff]),	runTest(20,8,8,[ff]),	runTest(20,9,9,[ff]),	runTest(20,10,10,[ff]),		runTest(20,5,5,[ffc]),	runTest(20,6,6,[ffc]),	runTest(20,7,7,[ffc]),	runTest(20,8,8,[ffc]),	runTest(20,9,9,[ffc]),	runTest(20,10,10,[ffc]),		runTest(20,5,5,[down]),	runTest(20,6,6,[down]),	runTest(20,7,7,[down]),	runTest(20,8,8,[down]),	runTest(20,9,9,[down]),	runTest(20,10,10,[down]),		runTest(20,5,5,[ff,down]),	runTest(20,6,6,[ff,down]),	runTest(20,7,7,[ff,down]),	runTest(20,8,8,[ff,down]),	runTest(20,9,9,[ff,down]),	runTest(20,10,10,[ff,down]),		runTest(20,5,5,[ffc,down]),	runTest(20,6,6,[ffc,down]),	runTest(20,7,7,[ffc,down]),	runTest(20,8,8,[ffc,down]),	runTest(20,9,9,[ffc,down]),	runTest(20,10,10,[ffc,down]).